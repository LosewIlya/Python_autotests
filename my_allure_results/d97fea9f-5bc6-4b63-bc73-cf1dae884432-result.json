{"name": "test_positive_login_wiki", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8656699b073aa5cbc917f0465cd7ddd\")>\n\n    def test_positive_login_wiki(browser):\n        \"\"\"\n        Test case POC-1\n        \"\"\"\n    \t# определяем адрес страницы для теста и переходим на неё\n        url = \"https://pokemonbattle.ru/\"\n        browser.get(url=url)\n    \n    \t# ищем по селектору инпут \"Email\", кликаем по нему и вводим значение email\n        email = WebDriverWait(browser, timeout=10, poll_frequency=2).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, '[class*=\"k_form_control\"] [id=\"k_email\"]')))\n        email.click()\n        email.send_keys('losew.ilya2011@yandex.by')\n        # email.send_keys('user@mail.com') # введи тут email своего тестового аккаунта на prod окружении\n    \n    \t# ищем по селектору инпут \"Password\", кликаем по нему и вводим значение пароля\n        password = browser.find_element(by=By.CSS_SELECTOR, value='[class*=\"k_form_control\"] [id=\"k_password\"]')\n        password.click()\n        password.send_keys('Elk356823') # введи тут пароль своего тестового аккаунта на prod окружении\n    \n    \t# ищем по селектору кнопку \"Войти\" и кликаем по ней\n        enter = browser.find_element(by=By.CSS_SELECTOR, value='[class*=\"k_form_send_auth\"]')\n        enter.click()\n    \n        # ждем успешного входа и обновления страницы\n>       WebDriverWait(browser, timeout=10, poll_frequency=2).until(EC.url_to_be(URL))\n\ntests\\web\\test_pokemon_web.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f8656699b073aa5cbc917f0465cd7ddd\")>\nmethod = <function url_to_be.<locals>._predicate at 0x000001F8C3A3D760>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "\nTest case POC-1\n", "start": 1745828857269, "stop": 1745828869773, "uuid": "de69788a-6579-43f1-aaf8-cb2d0b3c0836", "historyId": "403404c0546e18b50bd3801858f68614", "testCaseId": "403404c0546e18b50bd3801858f68614", "fullName": "tests.web.test_pokemon_web#test_positive_login_wiki", "labels": [{"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "test_pokemon_web"}, {"name": "host", "value": "DESKTOP-CR423FO"}, {"name": "thread", "value": "17464-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.test_pokemon_web"}]}