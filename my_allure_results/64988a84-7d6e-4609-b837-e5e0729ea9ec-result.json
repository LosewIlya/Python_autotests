{"name": "test_positive_visit", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\n  (Session info: chrome=135.0.7049.115); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF7AC54EFA5+77893]\n\tGetHandleVerifier [0x00007FF7AC54F000+77984]\n\t(No symbol) [0x00007FF7AC3191BA]\n\t(No symbol) [0x00007FF7AC320AEC]\n\t(No symbol) [0x00007FF7AC323B5C]\n\t(No symbol) [0x00007FF7AC323C2F]\n\t(No symbol) [0x00007FF7AC36EA17]\n\t(No symbol) [0x00007FF7AC36F41C]\n\t(No symbol) [0x00007FF7AC3C2237]\n\t(No symbol) [0x00007FF7AC39716F]\n\t(No symbol) [0x00007FF7AC3BF07F]\n\t(No symbol) [0x00007FF7AC396F03]\n\t(No symbol) [0x00007FF7AC360328]\n\t(No symbol) [0x00007FF7AC361093]\n\tGetHandleVerifier [0x00007FF7AC807B6D+2931725]\n\tGetHandleVerifier [0x00007FF7AC802132+2908626]\n\tGetHandleVerifier [0x00007FF7AC8200F3+3031443]\n\tGetHandleVerifier [0x00007FF7AC5691EA+184970]\n\tGetHandleVerifier [0x00007FF7AC57086F+215311]\n\tGetHandleVerifier [0x00007FF7AC556EC4+110436]\n\tGetHandleVerifier [0x00007FF7AC557072+110866]\n\tGetHandleVerifier [0x00007FF7AC53D479+5401]\n\tBaseThreadInitThunk [0x00007FFE417C7374+20]\n\tRtlUserThreadStart [0x00007FFE41D7CC91+33]", "trace": "self = <test_my_sait.TestPageText object at 0x0000014FCC51CCD0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"10b455b5da5be218a8327d974d5fe355\")>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"10b455b5da5be218a8327d974d5fe355\")>\n\n    def test_positive_visit(self, setup, browser):\n       \"\"\"\n       Test case POC-1\n       \"\"\"\n       browser = setup\n       browser.get('https://losewilya.github.io/')  # Замени на свой URL\n    \n           # Ищем элемент по CSS-селектору (например, заголовок h1)\n>      element = browser.find_element(by=By.CSS_SELECTOR, value='[Добро пожаловать в мой мир тестирования]')\n\ntests\\web\\test_my_sait.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014FCC512270>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: An invalid or illegal sele...AC53D479+5401]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE417C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE41D7CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\nE         (Session info: chrome=135.0.7049.115); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7AC54EFA5+77893]\nE       \tGetHandleVerifier [0x00007FF7AC54F000+77984]\nE       \t(No symbol) [0x00007FF7AC3191BA]\nE       \t(No symbol) [0x00007FF7AC320AEC]\nE       \t(No symbol) [0x00007FF7AC323B5C]\nE       \t(No symbol) [0x00007FF7AC323C2F]\nE       \t(No symbol) [0x00007FF7AC36EA17]\nE       \t(No symbol) [0x00007FF7AC36F41C]\nE       \t(No symbol) [0x00007FF7AC3C2237]\nE       \t(No symbol) [0x00007FF7AC39716F]\nE       \t(No symbol) [0x00007FF7AC3BF07F]\nE       \t(No symbol) [0x00007FF7AC396F03]\nE       \t(No symbol) [0x00007FF7AC360328]\nE       \t(No symbol) [0x00007FF7AC361093]\nE       \tGetHandleVerifier [0x00007FF7AC807B6D+2931725]\nE       \tGetHandleVerifier [0x00007FF7AC802132+2908626]\nE       \tGetHandleVerifier [0x00007FF7AC8200F3+3031443]\nE       \tGetHandleVerifier [0x00007FF7AC5691EA+184970]\nE       \tGetHandleVerifier [0x00007FF7AC57086F+215311]\nE       \tGetHandleVerifier [0x00007FF7AC556EC4+110436]\nE       \tGetHandleVerifier [0x00007FF7AC557072+110866]\nE       \tGetHandleVerifier [0x00007FF7AC53D479+5401]\nE       \tBaseThreadInitThunk [0x00007FFE417C7374+20]\nE       \tRtlUserThreadStart [0x00007FFE41D7CC91+33]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException"}, "description": "\nTest case POC-1\n", "start": 1745833772745, "stop": 1745833773393, "uuid": "4c03f0b9-d0b1-4f01-8c8f-5fbed9e180e4", "historyId": "0e3f514f4d40b02859f74017ba07e82e", "testCaseId": "0e3f514f4d40b02859f74017ba07e82e", "fullName": "tests.web.test_my_sait.TestPageText#test_positive_visit", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "test_my_sait"}, {"name": "subSuite", "value": "TestPageText"}, {"name": "host", "value": "DESKTOP-CR423FO"}, {"name": "thread", "value": "10116-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.test_my_sait"}]}