{"name": "test_check_api", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=135.0.7049.116)\nStacktrace:\n\tGetHandleVerifier [0x00007FF66CDFEFA5+77893]\n\tGetHandleVerifier [0x00007FF66CDFF000+77984]\n\t(No symbol) [0x00007FF66CBC91BA]\n\t(No symbol) [0x00007FF66CBA1B63]\n\t(No symbol) [0x00007FF66CC4E92E]\n\t(No symbol) [0x00007FF66CC6E972]\n\t(No symbol) [0x00007FF66CC46F03]\n\t(No symbol) [0x00007FF66CC10328]\n\t(No symbol) [0x00007FF66CC11093]\n\tGetHandleVerifier [0x00007FF66D0B7B6D+2931725]\n\tGetHandleVerifier [0x00007FF66D0B2132+2908626]\n\tGetHandleVerifier [0x00007FF66D0D00F3+3031443]\n\tGetHandleVerifier [0x00007FF66CE191EA+184970]\n\tGetHandleVerifier [0x00007FF66CE2086F+215311]\n\tGetHandleVerifier [0x00007FF66CE06EC4+110436]\n\tGetHandleVerifier [0x00007FF66CE07072+110866]\n\tGetHandleVerifier [0x00007FF66CDED479+5401]\n\tBaseThreadInitThunk [0x00007FFB4C207374+20]\n\tRtlUserThreadStart [0x00007FFB4CC1CC91+33]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"726d6fc3bcb646f0368943af526a7a3d\")>\nknockout = None\n\n    def test_check_api(browser, knockout):\n        \"\"\"\n        TRP-3. Check create pokemon by api request\n        \"\"\"\n        browser.get(url=URL)\n>       WebDriverWait(browser, timeout=10, poll_frequency=2).until(EC.url_to_be('https://pokemonbattle-stage.ru/login'))\n\ntests\\web\\test_pokemon_web.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Lenovo\\miniconda3\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nC:\\Users\\Lenovo\\miniconda3\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:172: in _predicate\n    return url == driver.current_url\nC:\\Users\\Lenovo\\miniconda3\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:560: in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\nC:\\Users\\Lenovo\\miniconda3\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021CEF45BA30>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...6CDED479+5401]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB4C207374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFB4CC1CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=135.0.7049.116)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66CDFEFA5+77893]\nE       \tGetHandleVerifier [0x00007FF66CDFF000+77984]\nE       \t(No symbol) [0x00007FF66CBC91BA]\nE       \t(No symbol) [0x00007FF66CBA1B63]\nE       \t(No symbol) [0x00007FF66CC4E92E]\nE       \t(No symbol) [0x00007FF66CC6E972]\nE       \t(No symbol) [0x00007FF66CC46F03]\nE       \t(No symbol) [0x00007FF66CC10328]\nE       \t(No symbol) [0x00007FF66CC11093]\nE       \tGetHandleVerifier [0x00007FF66D0B7B6D+2931725]\nE       \tGetHandleVerifier [0x00007FF66D0B2132+2908626]\nE       \tGetHandleVerifier [0x00007FF66D0D00F3+3031443]\nE       \tGetHandleVerifier [0x00007FF66CE191EA+184970]\nE       \tGetHandleVerifier [0x00007FF66CE2086F+215311]\nE       \tGetHandleVerifier [0x00007FF66CE06EC4+110436]\nE       \tGetHandleVerifier [0x00007FF66CE07072+110866]\nE       \tGetHandleVerifier [0x00007FF66CDED479+5401]\nE       \tBaseThreadInitThunk [0x00007FFB4C207374+20]\nE       \tRtlUserThreadStart [0x00007FFB4CC1CC91+33]\n\nC:\\Users\\Lenovo\\miniconda3\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "description": "\n    TRP-3. Check create pokemon by api request\n    ", "start": 1746184719027, "stop": 1746184722762, "uuid": "dc700c04-01a3-4995-a5c1-c24298d461b9", "historyId": "dbe4a1f11e72aca92c0d2b6b26ea55c0", "testCaseId": "dbe4a1f11e72aca92c0d2b6b26ea55c0", "fullName": "tests.web.test_pokemon_web#test_check_api", "labels": [{"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "test_pokemon_web"}, {"name": "host", "value": "DESKTOP-CR423FO"}, {"name": "thread", "value": "16744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.test_pokemon_web"}]}